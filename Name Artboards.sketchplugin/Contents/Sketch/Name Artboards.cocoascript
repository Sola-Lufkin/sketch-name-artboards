// Name Artboards v1.2 â€” Julius Tarng

var onRun = function(context) {
  var doc = context.document;

  log("========================= sketch-name-artboards log =========================");
  var groupName = 'Artboard labels'
  var artboards = [[doc currentPage] artboards];

  // Remove any previous existing 'Artboard labels' group
  allLayers = [[doc currentPage] layers];
  for(var i=0; i< [allLayers count]; i++){
    var layer = [allLayers objectAtIndex:i];
    if ([layer name] == groupName) {
      [layer removeFromParent];
    }
  }

  // Query resolution for appropriate font size and spacings, ask if slice should be drawn
  var options = ['.5x', '1x', '1.5x', '2x', '3x'];
  var choice = createSelect('What resolution are you working at?', options, 3);
  var scaleFactor = parseFloat(choice[1]);
  log("Resolution: " + scaleFactor + "x");
  var shouldDrawSlice = choice[2];
  log("Should Draw Slice? " + shouldDrawSlice);

  if (choice[0] == NSAlertFirstButtonReturn) {
    // Name artboards

    // New group to hold labels
    var group = [[doc currentPage] addLayerOfType: 'group'];
    [group setName: groupName]

    for(var i=0; i< [artboards count]; i++){
      var artboard = artboards[i];
      var artboardName = [artboard name];

      // Create label and set properties
      var textLayer = [group addLayerOfType: 'text'];
      [textLayer setName: artboardName];
      [textLayer setStringValue: artboardName];
      [textLayer setFontSize: 14 * scaleFactor];
      [textLayer setFontPostscriptName: 'Helvetica Neue'];
      [textLayer setLineSpacing: 16 * scaleFactor];

      var color = [[MSColor alloc] init];
      [color setRed: 188/255];
      [color setGreen: 188/255];
      [color setBlue: 188/255];
      [color setAlpha: 1.0];
      [textLayer setTextColor: color];

      // Position label approximately where it is in Sketch
      [[textLayer frame] setX:[[artboard frame] x] + (2 * scaleFactor)];
      [[textLayer frame] setY:[[artboard frame] y] - [[textLayer frame] height] - (4 * scaleFactor)];
    }

    // Select each layer to make group the size of the layers within
    groupLayers = [group layers];
    for(var i=0; i< [groupLayers count]; i++){
      var layer = [groupLayers objectAtIndex:i];
      [layer select:true byExpandingSelection:false];
    }

    // Lock group
    [group setIsLocked:true];
    [doc showMessage: [groupLayers count] + ' artboard labels created in "Artboard labels" group.'];

    if (shouldDrawSlice) {
      // Get bounds
      var minX = NSIntegerMax,
          minY = NSIntegerMax,
          maxX = NSIntegerMin,
          maxY = NSIntegerMin;

      // Find min and max coordinates (+layer dimension) to figure out where to draw slice
      for(var i=0; i< [allLayers count]; i++){
        var layer = [allLayers objectAtIndex:i];
        if ([layer isVisible] && !([layer name] == groupName)) {
          x = [[layer frame] x];
          y = [[layer frame] y];
          w = [[layer frame] width];
          h = [[layer frame] height];
          log(">> Accounting for <" + [layer name] + "> at x:" + x + ", y:" + y + ", w:" + w + ", h:" + h);

          if (x < minX) {
            minX = x;
            log("    minX updated to " + minX);
          }
          if ((x + w) > maxX) {
            maxX = (x + w);
            log("    maxX updated to " + maxX);
          }
          if (y < minY) {
            minY = y;
            log("    minY updated to " + minY);
          }
          if ((y + h) > maxY) {
            maxY = (y + h);
            log("    maxY updated to " + maxY);
          }
        }
      }

      // Draw slice
      var slice = [MSSliceLayer new];
      [slice setName: [doc displayName].split(".sketch")[0]];
      var padding = 100 * scaleFactor;

      [[slice frame] setX: minX - padding];
      [[slice frame] setY: minY - padding];
      [[slice frame] setWidth: maxX - minX + (padding * 2)];
      [[slice frame] setHeight: maxY - minY + (padding * 2)];
      log(">> Drawing slice from (" + minX + ", " + minY + ") of dimension (" + (maxX - minX + (padding*2)) + ", " + (maxY - minY + (padding*2)) + ")" )

      [group addSlice: slice];
      [slice select:true byExpandingSelection:false];
      [[doc currentView] refresh];
    }
  }
}

//
// Helpers
//

function createSelect(msg, items, selectedItemIndex){
  selectedItemIndex = selectedItemIndex || 0;

  var accessory = [[NSView alloc] initWithFrame:NSMakeRect(0,0,200,62)];

  var combobox = [[NSComboBox alloc] initWithFrame:NSMakeRect(0,37,200,25)];
  [combobox addItemsWithObjectValues:items];
  [combobox selectItemAtIndex:selectedItemIndex];

  var checkbox = [[NSButton alloc] initWithFrame:NSMakeRect(0,0,200,25)];
  [checkbox setButtonType:NSSwitchButton];
  [checkbox setTitle:@"Draw Slice"];
  [checkbox setState:NSOnState];

  [accessory addSubview:checkbox];
  [accessory addSubview:combobox];

  var alert = [[NSAlert alloc] init];
  [alert setMessageText:msg];
  [alert addButtonWithTitle:'OK'];
  [alert addButtonWithTitle:'Cancel'];
  [alert setAccessoryView:accessory];

  var responseCode = [alert runModal];
  var combosel = [combobox objectValueOfSelectedItem];
  if (!combosel) combosel = [combobox stringValue];
  var checksel = [checkbox state] == NSOnState;

  return [responseCode, combosel, checksel];
}
